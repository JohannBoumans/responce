{"ast":null,"code":"import _defineProperty from \"/Users/johannboumans/Data/DevConnector/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_POST, DELETE_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: {\n            payload\n          },\n          loading: false\n        })\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: state.post.comments.filter(comment => comment._id === payload)\n        }),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/johannboumans/Data/DevConnector/client/src/reducers/post.js"],"names":["ADD_POST","DELETE_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,YALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,cARF,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAuC;AAAA,QAC7CC,IAD6C,GAC5BD,MAD4B,CAC7CC,IAD6C;AAAA,QACvCC,OADuC,GAC5BF,MAD4B,CACvCE,OADuC;;AAEpD,UAAQD,IAAR;AACE,SAAKb,SAAL;AACE,+BACKW,KADL;AAEEJ,QAAAA,KAAK,EAAEO,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,QAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,IAAI,EAAEM;AAFR;;AAIF,SAAKhB,QAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,KAAK,EAAE,CAAEO,OAAF,EAAW,GAAGH,KAAK,CAACJ,KAApB,CAFT;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,WAAL;AACE,+BACKY,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,UAAL;AACE,+BACKU,KADL;AAEED,QAAAA,KAAK,EAAEI,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKP,YAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBT,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,qBAA8BV,IAA9B;AAAoCW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAAnD,aAA4DX,IAApF,CAFT;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,WAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,IAAI,oBACCG,KAAK,CAACH,IADP;AAEFY,UAAAA,QAAQ,EAAE;AAACN,YAAAA;AAAD,WAFR;AAGFL,UAAAA,OAAO,EAAE;AAHP;AAFN;;AAQF,SAAKJ,cAAL;AACE,+BACKM,KADL;AAEEH,QAAAA,IAAI,oBACCG,KAAK,CAACH,IADP;AAEFY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA2BM,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBF,OAAtD;AAFR,UAFN;AAMEL,QAAAA,OAAO,EAAE;AANX;;AAQF;AACE,aAAOE,KAAP;AAvDJ;AA0DD","sourcesContent":["import {\n  ADD_POST,\n  DELETE_POST,\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nexport default function (state = initialState, action){\n  const {type, payload} = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [ payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload.id ? {...post, likes: payload.likes} : post),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: {payload},\n          loading: false\n        }\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(comment => comment._id === payload)\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}
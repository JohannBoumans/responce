{"ast":null,"code":"var _jsxFileName = \"/Users/johannboumans/Data/DevConnector/client/src/components/profile/ProfileGithub.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport { getGithubRepos } from \"../../actions/profile\";\nimport Spinner from \"../layout/Spinner\";\n\nconst ProfileGithub = ({\n  username,\n  getGithubRepos,\n  repos\n}) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos(username)]);\n  return React.createElement(\"div\", {\n    className: \"profile-github\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Github Repos\"), repos === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }) : repos.map(repo => React.createElement(\"div\", {\n    key: repo._id,\n    className: \"repo bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, repo.name))))));\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getGithubRepos\n})(ProfileGithub);","map":{"version":3,"sources":["/Users/johannboumans/Data/DevConnector/client/src/components/profile/ProfileGithub.jsx"],"names":["React","useEffect","PropTypes","connect","getGithubRepos","Spinner","ProfileGithub","username","repos","map","repo","_id","html_url","name","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,cAAR,QAA6B,uBAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWH,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,CAAD,KAAuC;AAE3DP,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,cAAc,CAACG,QAAD,CAAd;AACD,GAFQ,EAEN,CAACH,cAAc,CAACG,QAAD,CAAf,CAFM,CAAT;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGC,KAAK,KAAK,IAAV,GAAiB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,GACCA,KAAK,CAACC,GAAN,CAAUC,IAAI,IACZ;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,IAAA,SAAS,EAAC,wBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAED,IAAI,CAACE,QAAd;AAAwB,IAAA,MAAM,EAAC,QAA/B;AAAwC,IAAA,GAAG,EAAC,qBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACG,IADR,CADF,CADF,CADF,CADF,CAHJ,CADF;AAkBD,CAxBD;;AA0BAP,aAAa,CAACQ,SAAd,GAA0B;AACxBV,EAAAA,cAAc,EAAEF,SAAS,CAACa,IAAV,CAAeC,UADP;AAExBR,EAAAA,KAAK,EAAEN,SAAS,CAACe,KAAV,CAAgBD,UAFC;AAGxBT,EAAAA,QAAQ,EAAEL,SAAS,CAACgB,MAAV,CAAiBF;AAHH,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCZ,EAAAA,KAAK,EAAEY,KAAK,CAACC,OAAN,CAAcb;AADW,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAAEgB,eAAF,EAAkB;AAACf,EAAAA;AAAD,CAAlB,CAAP,CAA2CE,aAA3C,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from \"react-redux\";\nimport {getGithubRepos} from \"../../actions/profile\";\nimport Spinner from \"../layout/Spinner\";\n\n\nconst ProfileGithub = ({username, getGithubRepos, repos}) => {\n\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos(username)]);\n\n  return (\n    <div className='profile-github'>\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\n      {repos === null ? <Spinner/> : (\n        repos.map(repo => (\n          <div key={repo._id} className='repo bg-white p-1 my-1'>\n            <div>\n              <h4>\n                <a href={repo.html_url} target='_blank' rel='noopener noreferrer'>\n                  {repo.name}\n                </a>\n              </h4>\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect( mapStateToProps,{getGithubRepos})(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}